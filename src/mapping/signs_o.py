def main():
    for key, value in result_typ.items():
        print(key, "is in progress.")
        for api, params in value.items():
            param = params[0]
            typo = params[1]

            if "m" in typo or "p" in typo:
                print(api, "needs to find its parent.")
                parent = input("Enter the parent of the API: ").strip()

                value[api] = (param, (typo, parent))

    print(result_typ)


result_typ = {
    "1.json": {
        "Path": [[], "c"],
        "ancestor": [["n"], "m"],
        "child": [["children"], "m"],
    },
    "2.json": {
        "LevelDB": [["filename", "kwargs"], "c"],
        "Put": [["key", "value", "sync"], "m"],
        "Get": [["key", "verify_checksums", "fill_cache"], "m"],
        "Delete": [["key", "sync"], "m"],
    },
    "4.json": {
        "Client": [
            [
                "application",
                "response_wrapper",
                "use_cookies",
                "allow_subdomain_redirects",
            ],
            "c",
        ],
        "get": [["args", "kw"], "m"],
        "data": [[], "p"],
        "mimetype": [[], "p m"],
        "status_code": [[], "p m"],
        "content_length": [[], "p"],
    },
    "5.json": {
        "command": [["name"], "f"],
        "argument": [["param_decls", "cls", "attrs"], "f"],
        "option": [["param_decls", "cls", "attrs"], "f"],
        "version_option": [
            [
                "version",
                "param_decls",
                "package_name",
                "prog_name",
                "message",
                "kwargs",
            ],
            "f",
        ],
        "echo": [["message", "file", "nl", "err", "color"], "f"],
    },
    "6.json": {
        "SSHClient": [[], "c"],
        "load_system_host_keys": [["filename"], "m"],
        "set_missing_host_key_policy": [["policy"], "m"],
        "connect": [
            [
                "hostname",
                "port",
                "username",
                "password",
                "pkey",
                "key_filename",
                "timeout",
                "allow_agent",
                "look_for_keys",
                "compress",
                "sock",
                "gss_auth",
                "gss_kex",
                "gss_deleg_creds",
                "gss_host",
                "banner_timeout",
                "auth_timeout",
                "channel_timeout",
                "gss_trust_dns",
                "passphrase",
                "disabled_algorithms",
                "transport_factory",
                "auth_strategy",
            ],
            "m",
        ],
        "open_sftp": [[], "m"],
        "close": [[], "m"],
        "exec_command": [
            ["command", "bufsize", "timeout", "get_pty", "environment"],
            "m",
        ],
        "recv_exit_status": [[], "m"],
        "put": [["localpath", "remotepath", "callback", "confirm"], "m"],
    },
    "8.json": {
        "StrongRandom": [["rng", "randfunc"], "c"],
        "randint": [["a", "b"], "m"],
        "get_random_bytes": [[], "f"],
        "new": [["key", "mode", "args", "kwargs"], "f"],
        "encrypt": [["plaintext", "output"], "m"],
        "decrypt": [["ciphertext", "output"], "m"],
    },
    "9.json": {
        "Bottle": [["catch_all", "auto_json"], "c"],
        "post": [["path", "method", "options"], "m"],
        "abort": [["code", "text"], "f"],
        "get": [[], "m"],
        "read": [[], "m"],
        "run": [
            [
                "app",
                "server",
                "host",
                "port",
                "interval",
                "reloader",
                "quiet",
                "plugins",
                "debug",
                "config",
                "kargs",
            ],
            "m",
        ],
        "headers": [[], "m"],
    },
    "13.json": {
        "new_version": [[], "e"],
        "working_path": [[], "e"],
        "dry_run": [[], "e"],
        "interactive": [[], "e"],
        "Namespace": [[], "c"],
        "ArgumentParser": [
            [
                "prog",
                "usage",
                "description",
                "epilog",
                "parents",
                "formatter_class",
                "prefix_chars",
                "fromfile_prefix_chars",
                "argument_default",
                "conflict_handler",
                "add_help",
                "allow_abbrev",
                "exit_on_error",
            ],
            "c",
        ],
        "add_argument": [["args", "kwargs"], "m"],
        "parse_args": [["args", "namespace"], "m"],
        "set_defaults": [["kwargs"], "m"],
    },
    "20.json": {
        "BertForTokenClassification": [["config"], "c"],
        "XLNetPreTrainedModel": [["inputs", "kwargs"], "c"],
        "XLNetModel": [["config"], "c"],
    },
    "28.json": {
        "Flask": [
            [
                "import_name",
                "static_url_path",
                "static_folder",
                "static_host",
                "host_matching",
                "subdomain_matching",
                "template_folder",
                "instance_path",
                "instance_relative_config",
                "root_path",
            ],
            "c",
        ],
        "route": [["rule", "options"], "m"],
        "method": [[], "p"],
        "secret_key": [[], "p"],
        "form": [[], "p m"],
        "files": [[], "p m"],
        "flash": [["message", "category"], "f"],
        "render_template": [["template_name_or_list", "context"], "f"],
        "send_from_directory": [["directory", "path", "kwargs"], "f"],
        "send_file": [
            [
                "path_or_file",
                "mimetype",
                "as_attachment",
                "download_name",
                "conditional",
                "etag",
                "last_modified",
                "max_age",
            ],
            "f",
        ],
        "run": [["host", "port", "debug", "load_dotenv", "options"], "m"],
    },
    "36.json": {
        "spawn_n": [[], "f"],
        "sleep": [[], "f"],
        "monkey_patch": [["on"], "f"],
        "setdefaulttimeout": [["timeout"], "f"],
        "time": [[], "f"],
    },
    "39.json": {
        "decode": [[], "e"],
        "Http": [
            [
                "cache",
                "timeout",
                "proxy_info",
                "ca_certs",
                "disable_ssl_certificate_validation",
                "tls_maximum_version",
                "tls_minimum_version",
            ],
            "c",
        ],
        "request": [
            ["uri", "method", "body", "headers", "redirections", "connection_type"],
            "m",
        ],
        "status": [[], "p"],
    },
    "60.json": {
        "acquire": [["timeout"], "m"],
        "LockFile": [["path", "threaded", "timeout"], "c"],
        "i_am_locking": [[], "m"],
        "release": [[], "m"],
        "break_lock": [[], "m"],
    },
    "65.json": {
        "attributes": [
            [
                "attrs",
                "apply_with_cmp",
                "apply_with_init",
                "apply_with_repr",
                "apply_immutable",
                "store_attributes",
                "kw",
            ],
            "f",
        ],
        "Attribute": [
            [
                "name",
                "exclude_from_cmp",
                "exclude_from_init",
                "exclude_from_repr",
                "exclude_from_immutable",
                "default_value",
                "default_factory",
                "instance_of",
                "init_aliaser",
            ],
            "c",
        ],
    },
    "85.json": {
        "run": [
            [
                "command",
                "shell",
                "pty",
                "combine_stderr",
                "quiet",
                "warn_only",
                "stdout",
                "stderr",
            ],
            "f",
        ],
        "sudo": [
            [
                "command",
                "shell",
                "pty",
                "combine_stderr",
                "user",
                "quiet",
                "warn_only",
                "stdout",
                "stderr",
                "group",
            ],
            "f",
        ],
        "get": [["remote_path", "local_path"], "f"],
        "disconnect_all": [[], "f"],
        "put": [
            ["local_path", "remote_path", "use_sudo", "mirror_local_mode", "mode"],
            "f",
        ],
        "user": [[], "p"],
        "hosts": [[], "p"],
        "password": [[], "p"],
        "host_string": [[], "p"],
        "warn_only": [[], "p"],
    },
    "86.json": {
        "PyQuery": [["args", "kwargs"], "c"],
        ".bicycle_station": [[], "e"],
        "div": [[], "e"],
        "attrib": [[], "p"],
        "text_content": [[], "f"],
    },
    "100.json": {
        "KafkaProducer": [["configs"], "c"],
        "send": [["topic", "value", "key", "partition", "timestamp_ms"], "m"],
        "add_callback": [["f", "args", "kwargs"], "m"],
        "add_errback": [["f", "args", "kwargs"], "m"],
    },
    "107.json": {
        "IPv4Address": [["address"], "c"],
        "IPv4Network": [["address", "strict"], "c"],
    },
    "110.json": {
        "is_empty_string": [["value"], "f"],
        "IntegerType": [[], "c"],
        "try_convert": [[], "m"],
        "is_not_empty_string": [["value"], "f"],
    },
    "117.json": {
        "wait_for_edge": [["channel", "edge", "bouncetime", "timeout"], "f"],
        "setmode": [["new_mode"], "f"],
        "setup": [["chanlist", "direction", "pull_up_down", "initial"], "f"],
    },
    "118.json": {
        "Pool": [["processes", "initializer", "initargs", "maxtaskperchild"], "c"],
        "imap": [["func", "iterable", "chunksize"], "m"],
        "close": [[], "m"],
        "join": [[], "m"],
    },
    "119.json": {
        "get_service": [["service_name", "api_version"], "m"],
        "get_session": [["env_vars"], "m"],
        "get_endpoint": [["region_name", "is_secure", "endpoint_url", "verify"], "m"],
        "get_operation": [["operation_name"], "m"],
    },
    "120.json": {
        "Consumer": [["key", "secret"], "c"],
        "Token": [["key", "secret"], "c"],
        "Client": [["consumer", "token", "kwargs"], "c"],
        "set_verifier": [["verifier"], "m"],
    },
    "125.json": {
        "IPAddress": [["addr", "version", "flags"], "c"],
        "IPNetwork": [["addr", "version", "flags", "expand_partial"], "c"],
    },
    "126.json": {
        "KafkaConsumer": [["topics", "configs"], "c"],
        "KafkaProducer": [["configs"], "c"],
        "poll": [["timeout_ms", "max_records"], "m"],
        "commit": [["offsets"], "m"],
        "close": [["autocommit"], "m"],
        "send": [["topic", "value", "key", "partition", "timestamp_ms"], "m"],
        "KafkaError": [[], "c"],
        "ConsumerNoMoreData": [[], "c"],
        "SelectSelector": [[], "c"],
        "DefaultSelector": [[], "c"],
    },
    "132.json": {
        "Sentry": [
            [
                "app",
                "client",
                "client_cls",
                "dsn",
                "logging",
                "logging_exclusions",
                "level",
                "wrap_wsgi",
                "register_signal",
            ],
            "c",
        ],
        "init_app": [
            [
                "app",
                "dsn",
                "logging",
                "level",
                "logging_exclusions",
                "wrap_wsgi",
                "register_signal",
            ],
            "m",
        ],
        "logging": [[], "p"],
        "level": [[], "p"],
        "register_logger_signal": [["client", "logger", "loglevel"], "f"],
        "register_signal": [["client", "ignore_expected"], "f"],
    },
    "149.json": {
        "open": [["name", "mode", "memmap", "save_backup", "kwargs"], "f"],
        "PrimaryHDU": [
            [
                "data",
                "header",
                "do_not_scale_image_data",
                "ignore_blank",
                "uint",
                "scale_back",
            ],
            "c",
        ],
        "ImageHDU": [
            ["data", "header", "name", "do_not_scale_image_data", "uint", "scale_back"],
            "c",
        ],
    },
    "153.json": {
        "RequestHandler": [["request", "response"], "c"],
        "body": [[], "p"],
        "query_string": [[], "p"],
        "WSGIApplication": [["routes", "debug", "config"], "c"],
    },
    "154.json": {
        "Sniffer": [[], "c"],
        "reader": [
            [
                "csvfile",
                "dialect",
                "delimiter",
                "quotechar",
                "escapechar",
                "doublequote",
                "skipinitialspace",
                "lineterminator",
                "quoting",
                "strict",
            ],
            "f",
        ],
        "Error": [[], "c"],
    },
    "175.json": {
        "PANDOC_PATH": [[], "e"],
        "Document": [[], "c"],
        "markdown": [[], "p"],
        "rst": [[], "p"],
    },
    "176.json": {"ConfigParser": [[], "c"], "read": [["filenames", "encoding"], "m"]},
    "177.json": {
        "get": [["url", "params", "kwargs"], "f"],
        "status_code": [[], "p"],
        "reason": [[], "p"],
        "json": [["kwargs"], "m"],
    },
    "190.json": {
        "body_stream": [[], "m"],
        "read": [["n"], "m"],
        "request": [["url", "method", "body", "headers", "kwargs"], "f"],
        "Resource": [["uri", "client_opts"], "c"],
        "post": [["path", "payload", "headers", "params_dict", "params"], "m"],
        "status_int": [[], "p"],
        "status": [[], "p"],
        "body_string": [["charset", "unicode_errors"], "m"],
    },
    "191.json": {
        "loads": [["s"], "f"],
        "SQLAlchemy": [[], "e"],
        "APIManager": [[], "e"],
        "route": [["rule", "options"], "m"],
        "Flask": [
            [
                "import_name",
                "static_url_path",
                "static_folder",
                "static_host",
                "host_matching",
                "subdomain_matching",
                "template_folder",
                "instance_path",
                "instance_relative_config",
                "root_path",
            ],
            "c",
        ],
        "config": [[], "p"],
        "after_request": [["f"], "m"],
        "run": [["host", "port", "debug", "load_dotenv", "options"], "m"],
        "Response": [[], "c"],
        "request": [[], "c"],
        "jsonify": [["args", "kwargs"], "f"],
    },
    "193.json": {
        "IPNetwork": [["addr", "version", "flags"], "c"],
        "IPAddress": [["addr", "version", "flags"], "c"],
        "value": [[], "p"],
        "network": [[], "p"],
        "prefixlen": [[], "p"],
    },
    "197.json": {
        "gensalt": [["rounds", "prefix"], "f"],
        "hashpw": [["password", "salt"], "f"],
    },
    "199.json": {
        "StrictRedis": [[], "c"],
        "set": [
            ["name", "value", "ex", "px", "nx", "xx", "keepttl", "get", "exat", "pxat"],
            "m",
        ],
        "get": [["name"], "m"],
        "delete": [["names"], "m"],
    },
    "200.json": {
        "noqa": [[], "e"],
        "match": [[], "m"],
        "register_check": [["check", "codes"], "f"],
        "expand_indent": [["line"], "f"],
        "Checker": [["filename", "lines", "options", "report", "kwargs"], "c"],
        "ARITHMETIC_OP": [[], "e"],
        "_checks": [[], "e"],
    },
    "202.json": {
        "initialize": [
            [
                "uri",
                "trace_level",
                "trace_file",
                "trace_stack_limit",
                "bytes_mode",
                "fileno",
                "kwargs",
            ],
            "f",
        ],
        "search_s": [["base", "scope", "filterstr", "attrlist", "attrsonly"], "m"],
        "SCOPE_SUBTREE": [[], "e"],
        "INVALID_CREDENTIALS": [[], "e"],
        "simple_bind_s": [["who", "cred", "serverctrls", "clientctrls"], "e"],
        "UNWILLING_TO_PERFORM": [[], "e"],
        "INVALID_DN_SYNTAX": [[], "e"],
        "SERVER_DOWN": [[], "e"],
        "unbind_s": [[], "m"],
    },
    "203.json": {
        "RTMClient": [
            [
                "token",
                "run_async",
                "auto_reconnect",
                "ssl",
                "proxy",
                "timeout",
                "base_url",
                "connect_method",
                "ping_interval",
                "loop",
                "headers",
            ],
            "c",
        ],
        "WebClient": [
            [
                "token",
                "run_async",
                "auto_reconnect",
                "ssl",
                "proxy",
                "timeout",
                "base_url",
                "connect_method",
                "ping_interval",
                "loop",
                "headers",
            ],
            "c",
        ],
        "run_on": [["event"], "m"],
        "chat_postMessage": [
            [
                "channel",
                "text",
                "as_user",
                "attachments",
                "blocks",
                "thread_ts",
                "reply_broadcast",
                "unfurl_links",
                "unfurl_media",
                "container_id",
                "icon_emoji",
                "icon_url",
                "mrkdwn",
                "link_names",
                "username",
                "parse",
                "metadata",
                "kwargs",
            ],
            "m",
        ],
        "users_list": [["cursor", "include_locale", "limit", "team_id", "kwargs"], "m"],
        "start": [[], "m"],
    },
    "205.json": {
        "parse": [["source", "parser"], "f"],
        "getroot": [[], "m"],
        "findall": [["elem", "path", "namespaces", "with_prefixes"], "m"],
        "get": [[], "m"],
    },
    "207.json": {
        "HTMLParser": [["tree", "strict", "namespaceHTMLElements", "debug"], "c"],
        "HTMLSanitizer": [[], "c"],
        "parseFragment": [["stream", "args", "kwargs"], "m"],
        "childNodes": [[], "p"],
        "toxml": [[], "m"],
    },
    "218.json": {
        "load": [["stream", "Loader", "version", "preserve_quotes"], "f"],
        "dump": [
            [
                "data",
                "stream",
                "Dumper",
                "default_style",
                "default_flow_style",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break",
                "encoding",
                "explicit_start",
                "explicit_end",
                "version",
                "tags",
                "block_seq_indent",
            ],
            "f",
        ],
    },
    "221.json": {
        "ArgumentParser": [
            [
                "prog",
                "usage",
                "description",
                "epilog",
                "parents",
                "formatter_class",
                "prefix_chars",
                "fromfile_prefix_chars",
                "argument_default",
                "conflict_handler",
                "add_help",
                "allow_abbrev",
                "exit_on_error",
            ],
            "c",
        ],
        "add_argument": [["args", "kwargs"], "m"],
        "parse_args": [["args", "namespace"], "m"],
    },
    "225.json": {"dumps": [[], "f"], "loads": [[], "f"]},
    "233.json": {
        "code": [[], "p"],
        "response_data": [[], "p"],
        "tweets": [["q"], "m"],
        "show": [["_id"], "m"],
        "TwitterHTTPError": [[], "c"],
        "verified": [[], "e"],
        "location": [[], "e"],
        "description": [[], "e"],
        "screen_name": [[], "e"],
        "name": [[], "e"],
        "statuses_count": [[], "e"],
        "followers_count": [[], "e"],
        "Twitter": [
            [
                "format",
                "domain",
                "secure",
                "auth",
                "api_version",
                "retry",
                "verify_context",
            ],
            "c",
        ],
        "OAuth": [["token", "token_secret", "consumer_key", "consumer_secret"], "c"],
        "user": [[], "e"],
        "user_timeline": [["screen_name", "count"], "m"],
    },
    "236.json": {
        "WSGIServer": [
            [
                "listener",
                "application",
                "backlog",
                "spawn",
                "log",
                "error_log",
                "handler_class",
                "environ",
                "ssl_args",
            ],
            "c",
        ],
        "serve_forever": [["stop_timeout"], "m"],
        "patch_all": [
            [
                "socket",
                "dns",
                "time",
                "select",
                "thread",
                "os",
                "ssl",
                "subprocess",
                "sys",
                "aggressive",
                "Event",
                "builtins",
                "signal",
                "queue",
                "contextvars",
                "kwargs",
            ],
            "f",
        ],
    },
    "238.json": {"ib": [[], "f"], "s": [[], "f"]},
    "251.json": {
        "create": [
            [
                "cls",
                "host",
                "port",
                "password",
                "db",
                "encoder",
                "auto_reconnect",
                "loop",
                "protocol_class",
            ],
            "m",
        ],
        "start_subscribe": [["tr", "a"], "m"],
        "subscribe": [["channels"], "m"],
        "next_published": [[], "m"],
        "close": [[], "m"],
        "publish": [["channel", "message", "kwargs"], "m"],
    },
    "254.json": {
        "local": [["command", "capture", "shell"], "f"],
        "lcd": [["path"], "f"],
        "settings": [["args", "kwargs"], "f"],
    },
    "265.json": {
        "parse": [["version"], "f"],
        "compare": [["ver1", "ver2"], "f"],
        "match": [["version", "match_expr"], "f"],
    },
    "267.json": {
        "Consumer": [["key", "secret"], "c"],
        "key": [[], "p"],
        "Token": [["key", "secret"], "c"],
    },
    "268.json": {
        "ArgumentParser": [
            [
                "prog",
                "usage",
                "description",
                "epilog",
                "parents",
                "formatter_class",
                "prefix_chars",
                "fromfile_prefix_chars",
                "argument_default",
                "conflict_handler",
                "add_help",
                "allow_abbrev",
                "exit_on_error",
            ],
            "c",
        ],
        "add_argument": [["args", "kwargs"], "m"],
        "add_subparsers": [["kwargs"], "m"],
        "add_parser": [["name", "kwargs"], "m"],
        "set_defaults": [["kwargs"], "m"],
        "parse_args": [["args", "namespace"], "m"],
    },
    "272.json": {
        "update": [["value"], "m"],
        "wrap_stderr": [[], "f"],
        "flush": [[], "f"],
        "Timer": [["format"], "c"],
        "ETA": [[], "c"],
        "Bar": [["marker", "left", "right", "fill", "fill_left"], "c"],
        "ProgressBar": [
            ["maxval", "widgets", "term_width", "poll", "left_justify", "fd"],
            "c",
        ],
    },
    "273.json": {
        "addcredentials": [["request"], "m"],
        "unescape": [[], "m"],
        "decode": [["encoding", "errors"], "m"],
        "Collect": [[], "e"],
        "Client": [["url", "kwargs"], "c"],
        "WebFault": [["fault", "document"], "c"],
        "HttpAuthenticated": [[], "c"],
        "Reply": [["code", "headers", "message"], "c"],
        "Text": [[], "c"],
    },
    "280.json": {
        "Browser": [
            [
                "history",
                "request_class",
                "content_parser",
                "factory_class",
                "allow_xhtml",
            ],
            "c",
        ],
        "set_handle_robots": [["handle"], "m"],
        "addheaders": [[], "e"],
        "open": [["url_or_request", "data", "timeout"], "m"],
        "read": [["size"], "m"],
    },
    "281.json": {
        "Consumer": [["key", "secret"], "c"],
        "Token": [["key", "secret"], "c"],
        "Client": [["consumer", "token", "kwargs"], "c"],
        "status": [[], "p"],
        "key": [[], "p"],
        "request": [
            ["uri", "method", "body", "headers", "redirections", "connection_type"],
            "m",
        ],
    },
    "282.json": {
        "ConstantLR": [[], "c"],
        "WarmupCosineWithWarmupRestartsSchedule": [
            ["warmup", "t_total", "cycles", "kw"],
            "c",
        ],
        "BertAdam": [
            [
                "params",
                "lr",
                "warmup",
                "t_total",
                "schedule",
                "b1",
                "b2",
                "e",
                "weight_decay_rate",
                "max_grad_norm",
            ],
            "c",
        ],
        "WarmupCosineSchedule": [["warmup", "t_total", "cycles", "kw"], "c"],
        "WarmupConstantSchedule": [[], "c"],
        "WarmupLinearSchedule": [[], "c"],
        "WarmupCosineWithHardRestartsSchedule": [
            ["warmup", "t_total", "cycles", "kw"],
            "c",
        ],
        "from_pretrained": [
            ["cls", "pretrained_model_name", "cache_dir", "inputs", "kwargs"],
            "m",
        ],
        "BertLayerNorm": [["config", "variance_epsilon"], ""],
    },
    "283.json": {
        "IPv4Address": [["address"], "c"],
        "AddressValueError": [[], "c"],
        "IPv6Address": [["address"], "c"],
    },
    "284.json": {
        "ClientSession": [
            [
                "base_url",
                "connector",
                "loop",
                "cookies",
                "headers",
                "skip_auto_headers",
                "auth",
                "json_serialize",
                "request_class",
                "response_class",
                "ws_response_class",
                "version",
                "cookie_jar",
                "connector_owner",
                "raise_for_status",
                "read_timeout",
                "conn_timeout",
                "timeout",
                "auto_decompress",
                "trust_env",
                "requote_redirect_url",
                "trace_configs",
                "read_bufsize",
                "fallback_charset_resolver",
            ],
            "c",
        ],
        "get": [["url", "allow_redirects", "kwargs"], "m"],
        "status": [[], "p"],
        "ClientConnectorError": [["connection_key", "os_error"], "c"],
    },
    "293.json": {
        "white": [[], "c"],
        "QThread": [["parent"], "c"],
        "QCoreApplication": [["argv"], "c"],
        "Vertical": [[], "c"],
        "QSplitter": [["parent"], "c"],
        "Horizontal": [[], "c"],
        "instance": [[], "m"],
        "QMainWindow": [["parent", "flags"], "c"],
        "QWidget": [["parent", "flags"], "c"],
        "QApplication": [["argv"], "c"],
        "QAction": [["parent"], "c"],
        "QPushButton": [["parent"], "c"],
        "QLineEdit": [["parent"], "c"],
        "QTextEdit": [["parent"], "c"],
        "QVBoxLayout": [["parent"], "c"],
        "QGridLayout": [["parent"], "c"],
        "QLabel": [["parent", "flags"], "c"],
        "QFileDialog": [["parent", "f"], "c"],
        "QMessageBox": [["parent"], "c"],
        "QComboBox": [["parent"], "c"],
        "QScrollArea": [["parent"], "c"],
        "QStyle": [[], "c"],
        "QGroupBox": [["parent"], "c"],
        "QCheckBox": [["parent"], "c"],
    },
    "303.json": {
        "HTTPError": [[], "c"],
        "parse_url": [["url"], "f"],
        "scheme": [[], "p"],
        "connection_from_url": [["url", "kw"], "f"],
        "request_uri": [[], "p"],
    },
    "304.json": {
        "load_cert_der_string": [["cert_str"], "f"],
        "get_subject": [[], "m"],
        "as_text": [["indent", "flags"], "m"],
        "get_issuer": [[], "m"],
        "get_pubkey": [[], "m"],
    },
}

result_typ_p = {
    "1.json": {
        "Path": [[], "c"],
        "ancestor": (["n"], ("m", "AbstractPath")),
        "child": (["children"], ("m", "AbstractPath")),
    },
    "2.json": {
        "LevelDB": [["create_if_missing", "error_if_exists"], "c"],
        "Put": ([], ("m", "LevelDB")),
        "Get": ([], ("m", "LevelDB")),
        "Delete": ([], ("m", "LevelDB")),
    },
    "4.json": {
        "Client": [
            [
                "application",
                "response_wrapper",
                "use_cookies",
                "allow_subdomain_redirects",
            ],
            "c",
        ],
        "get": (["args", "kw"], ("m", "Client")),
        "data": ([], ("p", "Response")),
        "mimetype": ([], ("p m", "Response")),
        "status_code": ([], ("p m", "Response")),
        "content_length": ([], ("p", "Response")),
    },
    "5.json": {
        "command": [["name"], "f"],
        "argument": [["param_decls", "cls", "attrs"], "f"],
        "option": [["param_decls", "cls", "attrs"], "f"],
        "version_option": [
            [
                "version",
                "param_decls",
                "package_name",
                "prog_name",
                "message",
                "kwargs",
            ],
            "f",
        ],
        "echo": [["message", "file", "nl", "err", "color"], "f"],
    },
    "6.json": {
        "SSHClient": [[], "c"],
        "load_system_host_keys": (["filename"], ("m", "SSHClient")),
        "set_missing_host_key_policy": (["policy"], ("m", "SSHClient")),
        "connect": (
            [
                "hostname",
                "port",
                "username",
                "password",
                "pkey",
                "key_filename",
                "timeout",
                "allow_agent",
                "look_for_keys",
                "compress",
                "sock",
                "gss_auth",
                "gss_kex",
                "gss_deleg_creds",
                "gss_host",
                "banner_timeout",
                "auth_timeout",
                "channel_timeout",
                "gss_trust_dns",
                "passphrase",
                "disabled_algorithms",
                "transport_factory",
                "auth_strategy",
            ],
            ("m", "SSHClient"),
        ),
        "open_sftp": ([], ("m", "SSHClient")),
        "close": ([], ("m", "SSHClient")),
        "exec_command": (
            ["command", "bufsize", "timeout", "get_pty", "environment"],
            ("m", "SSHClient"),
        ),
        "recv_exit_status": ([], ("m", "Channel")),
        "put": (
            ["localpath", "remotepath", "callback", "confirm"],
            ("m", "SFTPClient"),
        ),
    },
    "8.json": {
        "StrongRandom": [["rng", "randfunc"], "c"],
        "randint": (["a", "b"], ("m", "StrongRandom")),
        "get_random_bytes": [[], "f"],
        "new": [["key", "mode", "args", "kwargs"], "f"],
        "encrypt": (["plaintext", "output"], ("m", "CbcMode")),
        "decrypt": (["ciphertext", "output"], ("m", "CbcMode")),
    },
    "9.json": {
        "Bottle": [["catch_all", "auto_json"], "c"],
        "post": (["path", "method", "options"], ("m", "Bottle")),
        "abort": [["code", "text"], "f"],
        "get": ([], ("m", "None")),
        "read": ([], ("m", "BaseRequest")),
        "run": (
            [
                "app",
                "server",
                "host",
                "port",
                "interval",
                "reloader",
                "quiet",
                "plugins",
                "debug",
                "config",
                "kargs",
            ],
            ("m", "Bottle"),
        ),
        "headers": ([], ("m", "BaseRequest")),
    },
    "13.json": {
        "ArgumentParser": [
            [
                "prog",
                "usage",
                "description",
                "epilog",
                "parents",
                "formatter_class",
                "prefix_chars",
                "fromfile_prefix_chars",
                "argument_default",
                "conflict_handler",
                "add_help",
                "allow_abbrev",
                "exit_on_error",
            ],
            "c",
        ],
        "add_argument": (["args", "kwargs"], ("m", "_ActionsContainer")),
        "parse_args": (["args", "namespace"], ("m", "ArgumentParser")),
        "set_defaults": (["kwargs"], ("m", "_ActionsContainer")),
    },
    "20.json": {
        "BertForTokenClassification": [["config"], "c"],
        "XLNetPreTrainedModel": [["inputs", "kwargs"], "c"],
        "XLNetModel": [["config"], "c"],
    },
    "28.json": {
        "Flask": [
            [
                "import_name",
                "static_url_path",
                "static_folder",
                "static_host",
                "host_matching",
                "subdomain_matching",
                "template_folder",
                "instance_path",
                "instance_relative_config",
                "root_path",
            ],
            "c",
        ],
        "route": (["rule", "options"], ("m", "Scaffold")),
        "method": ([], ("p", "Request")),
        "secret_key": ([], ("p", "App")),
        "form": ([], ("p m", "Request")),
        "files": ([], ("p m", "Request")),
        "flash": [["message", "category"], "f"],
        "render_template": [["template_name_or_list", "context"], "f"],
        "send_from_directory": [["directory", "path", "kwargs"], "f"],
        "send_file": [
            [
                "path_or_file",
                "mimetype",
                "as_attachment",
                "download_name",
                "conditional",
                "etag",
                "last_modified",
                "max_age",
            ],
            "f",
        ],
        "run": (["host", "port", "debug", "load_dotenv", "options"], ("m", "Flask")),
    },
    "36.json": {
        "spawn_n": [[], "f"],
        "sleep": [[], "f"],
        "monkey_patch": [["on"], "f"],
        "setdefaulttimeout": [["timeout"], "f"],
        "time": [[], "f"],
    },
    "39.json": {
        "Http": [
            [
                "cache",
                "timeout",
                "proxy_info",
                "ca_certs",
                "disable_ssl_certificate_validation",
                "tls_maximum_version",
                "tls_minimum_version",
            ],
            "c",
        ],
        "request": (
            ["uri", "method", "body", "headers", "redirections", "connection_type"],
            ("m", "Http"),
        ),
        "status": ([], ("p", "Response")),
    },
    "60.json": {
        "acquire": (["timeout"], ("m", "MkdirLockFile")),
        "LockFile": [["path", "threaded", "timeout"], "c"],
        "i_am_locking": ([], ("m", "MkdirLockFile")),
        "release": ([], ("m", "MkdirLockFile")),
        "break_lock": ([], ("m", "MkdirLockFile")),
    },
    "65.json": {
        "attributes": [
            [
                "attrs",
                "apply_with_cmp",
                "apply_with_init",
                "apply_with_repr",
                "apply_immutable",
                "store_attributes",
                "kw",
            ],
            "f",
        ],
        "Attribute": [
            [
                "name",
                "exclude_from_cmp",
                "exclude_from_init",
                "exclude_from_repr",
                "exclude_from_immutable",
                "default_value",
                "default_factory",
                "instance_of",
                "init_aliaser",
            ],
            "c",
        ],
    },
    "85.json": {
        "run": [
            [
                "command",
                "shell",
                "pty",
                "combine_stderr",
                "quiet",
                "warn_only",
                "stdout",
                "stderr",
            ],
            "f",
        ],
        "sudo": [
            [
                "command",
                "shell",
                "pty",
                "combine_stderr",
                "user",
                "quiet",
                "warn_only",
                "stdout",
                "stderr",
                "group",
            ],
            "f",
        ],
        "get": [["remote_path", "local_path"], "f"],
        "disconnect_all": [[], "f"],
        "put": [
            ["local_path", "remote_path", "use_sudo", "mirror_local_mode", "mode"],
            "f",
        ],
        "user": ([], ("p", "_AttributeDict")),
        "hosts": ([], ("p", "_AttributeDict")),
        "password": ([], ("p", "_AttributeDict")),
        "host_string": ([], ("p", "_AttributeDict")),
        "warn_only": ([], ("p", "_AttributeDict")),
    },
    "86.json": {
        "PyQuery": [["args", "kwargs"], "c"],
        ".bicycle_station": [[], "e"],
        "div": [[], "e"],
        "attrib": ([], ("p", "None")),
        "text_content": [[], "f"],
    },
    "100.json": {
        "KafkaProducer": [["configs"], "c"],
        "send": (
            ["topic", "value", "key", "partition", "timestamp_ms"],
            ("m", "KafkaProducer"),
        ),
        "add_callback": (["f", "args", "kwargs"], ("m", "Future")),
        "add_errback": (["f", "args", "kwargs"], ("m", "Future")),
    },
    "107.json": {
        "IPv4Address": [["address"], "c"],
        "IPv4Network": [["address", "strict"], "c"],
    },
    "110.json": {
        "is_empty_string": [["value"], "f"],
        "IntegerType": [[], "c"],
        "try_convert": ([], ("m", "IntegerType")),
        "is_not_empty_string": [["value"], "f"],
    },
    "117.json": {
        "wait_for_edge": [["channel", "edge", "bouncetime", "timeout"], "f"],
        "setmode": [["new_mode"], "f"],
        "setup": [["chanlist", "direction", "pull_up_down", "initial"], "f"],
    },
    "118.json": {
        "Pool": [["processes", "initializer", "initargs", "maxtaskperchild"], "c"],
        "imap": (["func", "iterable", "chunksize"], ("m", "Pool")),
        "close": ([], ("m", "Pool")),
        "join": ([], ("m", "Pool")),
    },
    "119.json": {
        "get_service": (["service_name", "api_version"], ("m", "Session")),
        "get_session": (["env_vars"], ("m", "Session")),
        "get_endpoint": (
            ["region_name", "is_secure", "endpoint_url", "verify"],
            ("m", "None"),
        ),
        "get_operation": (["operation_name"], ("m", "None")),
    },
    "120.json": {
        "Consumer": [["key", "secret"], "c"],
        "Token": [["key", "secret"], "c"],
        "Client": [["consumer", "token", "kwargs"], "c"],
        "set_verifier": (["verifier"], ("m", "Token")),
    },
    "125.json": {
        "IPAddress": [["addr", "version", "flags"], "c"],
        "IPNetwork": [["addr", "version", "flags", "expand_partial"], "c"],
    },
    "126.json": {
        "KafkaConsumer": [["topics", "configs"], "c"],
        "KafkaProducer": [["configs"], "c"],
        "poll": (["timeout_ms", "max_records"], ("m", "KafkaConsumer")),
        "commit": (["offsets"], ("m", "KafkaConsumer")),
        "close": (["autocommit"], ("m", "KafkaConsumer")),
        "send": (
            ["topic", "value", "key", "partition", "timestamp_ms"],
            ("m", "KafkaProducer"),
        ),
        "KafkaError": [[], "c"],
        "ConsumerNoMoreData": [[], "c"],
        "SelectSelector": [[], "c"],
        "DefaultSelector": [[], "c"],
    },
    "132.json": {
        "Sentry": [
            [
                "app",
                "client",
                "client_cls",
                "dsn",
                "logging",
                "logging_exclusions",
                "level",
                "wrap_wsgi",
                "register_signal",
            ],
            "c",
        ],
        "init_app": (
            [
                "app",
                "dsn",
                "logging",
                "level",
                "logging_exclusions",
                "wrap_wsgi",
                "register_signal",
            ],
            ("m", "Sentry"),
        ),
        "logging": ([], ("p", "Sentry")),
        "level": ([], ("p", "Sentry")),
        "register_logger_signal": [["client", "logger", "loglevel"], "f"],
        "register_signal": [["client", "ignore_expected"], "f"],
    },
    "149.json": {
        "open": [["name", "mode", "memmap", "save_backup", "kwargs"], "f"],
        "PrimaryHDU": [
            [
                "data",
                "header",
                "do_not_scale_image_data",
                "ignore_blank",
                "uint",
                "scale_back",
            ],
            "c",
        ],
        "ImageHDU": [
            ["data", "header", "name", "do_not_scale_image_data", "uint", "scale_back"],
            "c",
        ],
    },
    "153.json": {
        "RequestHandler": [["request", "response"], "c"],
        "body": ([], ("p", "None")),
        "query_string": ([], ("p", "None")),
        "WSGIApplication": [["routes", "debug", "config"], "c"],
    },
    "154.json": {
        "Sniffer": [[], "c"],
        "reader": [
            [
                "csvfile",
                "dialect",
                "delimiter",
                "quotechar",
                "escapechar",
                "doublequote",
                "skipinitialspace",
                "lineterminator",
                "quoting",
                "strict",
            ],
            "f",
        ],
        "Error": [[], "c"],
    },
    "175.json": {
        "PANDOC_PATH": [[], "e"],
        "Document": [[], "c"],
        "markdown": ([], ("p", "Document")),
        "rst": ([], ("p", "Document")),
    },
    "176.json": {
        "ConfigParser": [[], "c"],
        "read": (["filenames", "encoding"], ("m", "RawConfigParser")),
    },
    "177.json": {
        "get": [["url", "params", "kwargs"], "f"],
        "status_code": ([], ("p", "Response")),
        "reason": ([], ("p", "Response")),
        "json": (["kwargs"], ("m", "Response")),
    },
    "190.json": {
        "request": [["url", "method", "body", "headers", "kwargs"], "f"],
        "Resource": [["uri", "client_opts"], "c"],
        "post": (
            ["path", "payload", "headers", "params_dict", "params"],
            ("m", "Resource"),
        ),
        "status_int": ([], ("p", "Response")),
        "status": ([], ("p", "Response")),
        "body_string": (["charset", "unicode_errors"], ("m", "Response")),
    },
    "191.json": {
        "route": (["rule", "options"], ("m", "Scaffold")),
        "Flask": [
            [
                "import_name",
                "static_url_path",
                "static_folder",
                "static_host",
                "host_matching",
                "subdomain_matching",
                "template_folder",
                "instance_path",
                "instance_relative_config",
                "root_path",
            ],
            "c",
        ],
        "config": ([], ("p", "App")),
        "after_request": (["f"], ("m", "Scaffold")),
        "run": (["host", "port", "debug", "load_dotenv", "options"], ("m", "Flask")),
        "Response": [[], "c"],
        "request": [[], "c"],
        "jsonify": [["args", "kwargs"], "f"],
    },
    "193.json": {
        "IPNetwork": [["addr", "version", "flags"], "c"],
        "IPAddress": [["addr", "version", "flags"], "c"],
        "value": ([], ("p", "BaseIP")),
        "network": ([], ("p", "IPNetwork")),
        "prefixlen": ([], ("p", "IPNetwork")),
    },
    "197.json": {
        "gensalt": [["rounds", "prefix"], "f"],
        "hashpw": [["password", "salt"], "f"],
    },
    "199.json": {
        "StrictRedis": [[], "c"],
        "set": (
            ["name", "value", "ex", "px", "nx", "xx", "keepttl", "get", "exat", "pxat"],
            ("m", "BasicKeyCommands"),
        ),
        "get": (["name"], ("m", "BasicKeyCommands")),
        "delete": (["names"], ("m", "BasicKeyCommands")),
    },
    "200.json": {
        "noqa": [[], "e"],
        "match": ([], ("m", "None")),
        "register_check": [["check", "codes"], "f"],
        "expand_indent": [["line"], "f"],
        "Checker": [["filename", "lines", "options", "report", "kwargs"], "c"],
        "ARITHMETIC_OP": [[], "e"],
        "_checks": [[], "e"],
    },
    "202.json": {
        "initialize": [
            [
                "uri",
                "trace_level",
                "trace_file",
                "trace_stack_limit",
                "bytes_mode",
                "fileno",
                "kwargs",
            ],
            "f",
        ],
        "search_s": (
            ["base", "scope", "filterstr", "attrlist", "attrsonly"],
            ("m", "SimpleLDAPObject"),
        ),
    },
    "203.json": {
        "RTMClient": [
            [
                "token",
                "run_async",
                "auto_reconnect",
                "ssl",
                "proxy",
                "timeout",
                "base_url",
                "connect_method",
                "ping_interval",
                "loop",
                "headers",
            ],
            "c",
        ],
        "WebClient": [
            [
                "token",
                "run_async",
                "auto_reconnect",
                "ssl",
                "proxy",
                "timeout",
                "base_url",
                "connect_method",
                "ping_interval",
                "loop",
                "headers",
            ],
            "c",
        ],
        "run_on": (["event"], ("m", "RTMClient")),
        "chat_postMessage": (
            [
                "channel",
                "text",
                "as_user",
                "attachments",
                "blocks",
                "thread_ts",
                "reply_broadcast",
                "unfurl_links",
                "unfurl_media",
                "container_id",
                "icon_emoji",
                "icon_url",
                "mrkdwn",
                "link_names",
                "username",
                "parse",
                "metadata",
                "kwargs",
            ],
            ("m", "LegacyWebClient"),
        ),
        "users_list": (
            ["cursor", "include_locale", "limit", "team_id", "kwargs"],
            ("m", "LegacyWebClient"),
        ),
        "start": ([], ("m", "RTMClient")),
    },
    "205.json": {
        "parse": [["source", "parser"], "f"],
        "getroot": ([], ("m", "_ElementTree")),
        "findall": (
            ["elem", "path", "namespaces", "with_prefixes"],
            ("m", "_ElementTree"),
        ),
        "get": ([], ("m", "None")),
    },
    "207.json": {
        "HTMLParser": [["tree", "strict", "namespaceHTMLElements", "debug"], "c"],
        "HTMLSanitizer": [[], "c"],
        "parseFragment": (["stream", "args", "kwargs"], ("m", "HTMLParser")),
        "childNodes": ([], ("p", "None")),
        "toxml": ([], ("m", "None")),
    },
    "218.json": {
        "load": [["stream", "Loader", "version", "preserve_quotes"], "f"],
        "dump": [
            [
                "data",
                "stream",
                "Dumper",
                "default_style",
                "default_flow_style",
                "canonical",
                "indent",
                "width",
                "allow_unicode",
                "line_break",
                "encoding",
                "explicit_start",
                "explicit_end",
                "version",
                "tags",
                "block_seq_indent",
            ],
            "f",
        ],
    },
    "221.json": {
        "ArgumentParser": [
            [
                "prog",
                "usage",
                "description",
                "epilog",
                "parents",
                "formatter_class",
                "prefix_chars",
                "fromfile_prefix_chars",
                "argument_default",
                "conflict_handler",
                "add_help",
                "allow_abbrev",
                "exit_on_error",
            ],
            "c",
        ],
        "add_argument": (["args", "kwargs"], ("m", "_ActionsContainer")),
        "parse_args": (["args", "namespace"], ("m", "ArgumentParser")),
    },
    "225.json": {"dumps": [[], "f"], "loads": [[], "f"]},
    "233.json": {
        "code": ([], ("p", "None")),
        "response_data": ([], ("p", "TwitterHTTPError")),
        "tweets": (["q"], ("m", "None")),
        "show": (["_id"], ("m", "None")),
        "TwitterHTTPError": [[], "c"],
        "verified": [[], "e"],
        "location": [[], "e"],
        "description": [[], "e"],
        "screen_name": [[], "e"],
        "name": [[], "e"],
        "statuses_count": [[], "e"],
        "followers_count": [[], "e"],
        "Twitter": [
            [
                "format",
                "domain",
                "secure",
                "auth",
                "api_version",
                "retry",
                "verify_context",
            ],
            "c",
        ],
        "OAuth": [["token", "token_secret", "consumer_key", "consumer_secret"], "c"],
        "user": [[], "e"],
        "user_timeline": (["screen_name", "count"], ("m", "None")),
    },
    "236.json": {
        "WSGIServer": [
            [
                "listener",
                "application",
                "backlog",
                "spawn",
                "log",
                "error_log",
                "handler_class",
                "environ",
                "ssl_args",
            ],
            "c",
        ],
        "serve_forever": (["stop_timeout"], ("m", "BaseServer")),
        "patch_all": [
            [
                "socket",
                "dns",
                "time",
                "select",
                "thread",
                "os",
                "ssl",
                "subprocess",
                "sys",
                "aggressive",
                "Event",
                "builtins",
                "signal",
                "queue",
                "contextvars",
                "kwargs",
            ],
            "f",
        ],
    },
    "238.json": {"ib": [[], "f"], "s": [[], "f"]},
    "251.json": {
        "create": (
            [
                "cls",
                "host",
                "port",
                "password",
                "db",
                "encoder",
                "auto_reconnect",
                "loop",
                "protocol_class",
            ],
            ("m", "Connection"),
        ),
        "start_subscribe": (["tr", "a"], ("m", "Connection")),
        "subscribe": (["channels"], ("m", "Subsciption")),
        "next_published": ([], ("m", "Subscription")),
        "close": ([], ("m", "Connection")),
    },
    "254.json": {
        "local": [["command", "capture", "shell"], "f"],
        "lcd": [["path"], "f"],
        "settings": [["args", "kwargs"], "f"],
    },
    "265.json": {
        "parse": [["version"], "f"],
        "compare": [["ver1", "ver2"], "f"],
        "match": [["version", "match_expr"], "f"],
    },
    "267.json": {
        "Consumer": [["key", "secret"], "c"],
        "key": ([], ("p", "Consumer")),
        "Token": [["key", "secret"], "c"],
    },
    "268.json": {
        "ArgumentParser": [
            [
                "prog",
                "usage",
                "description",
                "epilog",
                "parents",
                "formatter_class",
                "prefix_chars",
                "fromfile_prefix_chars",
                "argument_default",
                "conflict_handler",
                "add_help",
                "allow_abbrev",
                "exit_on_error",
            ],
            "c",
        ],
        "add_argument": (["args", "kwargs"], ("m", "_ActionsContainer")),
        "add_subparsers": (["kwargs"], ("m", "ArgumentParser")),
        "add_parser": (["name", "kwargs"], ("m", "_SubParsersAction")),
        "set_defaults": (["kwargs"], ("m", "_ActionsContainer")),
        "parse_args": (["args", "namespace"], ("m", "ArgumentParser")),
    },
    "272.json": {
        "update": (["value"], ("m", "ProgressBar")),
        "wrap_stderr": [[], "f"],
        "flush": [[], "f"],
        "Timer": [["format"], "c"],
        "ETA": [[], "c"],
        "Bar": [["marker", "left", "right", "fill", "fill_left"], "c"],
        "ProgressBar": [
            ["maxval", "widgets", "term_width", "poll", "left_justify", "fd"],
            "c",
        ],
    },
    "273.json": {
        "Collect": [[], "e"],
        "Client": [["url", "kwargs"], "c"],
        "WebFault": [["fault", "document"], "c"],
        "HttpAuthenticated": [[], "c"],
        "Reply": [["code", "headers", "message"], "c"],
        "Text": [[], "c"],
    },
    "280.json": {
        "Browser": [
            [
                "history",
                "request_class",
                "content_parser",
                "factory_class",
                "allow_xhtml",
            ],
            "c",
        ],
        "set_handle_robots": (["handle"], ("m", "UserAgentBase")),
        "addheaders": [[], "e"],
        "open": (["url_or_request", "data", "timeout"], ("m", "Browser")),
        "read": (["size"], ("m", "seek_wrapper")),
    },
    "281.json": {
        "Consumer": [["key", "secret"], "c"],
        "Token": [["key", "secret"], "c"],
        "Client": [["consumer", "token", "kwargs"], "c"],
        "status": ([], ("p", "Response")),
        "key": ([], ("p", "Consumer")),
        "request": (
            ["uri", "method", "body", "headers", "redirections", "connection_type"],
            ("m", "Client"),
        ),
    },
    "282.json": {
        "ConstantLR": [[], "c"],
        "WarmupCosineWithWarmupRestartsSchedule": [
            ["warmup", "t_total", "cycles", "kw"],
            "c",
        ],
        "BertAdam": [
            [
                "params",
                "lr",
                "warmup",
                "t_total",
                "schedule",
                "b1",
                "b2",
                "e",
                "weight_decay_rate",
                "max_grad_norm",
            ],
            "c",
        ],
        "WarmupCosineSchedule": [["warmup", "t_total", "cycles", "kw"], "c"],
        "WarmupConstantSchedule": [[], "c"],
        "WarmupLinearSchedule": [[], "c"],
        "WarmupCosineWithHardRestartsSchedule": [
            ["warmup", "t_total", "cycles", "kw"],
            "c",
        ],
        "from_pretrained": (
            ["cls", "pretrained_model_name", "cache_dir", "inputs", "kwargs"],
            ("m", "BertPreTrainedModel"),
        ),
        "BertLayerNorm": [["config", "variance_epsilon"], ""],
    },
    "283.json": {
        "IPv4Address": [["address"], "c"],
        "AddressValueError": [[], "c"],
        "IPv6Address": [["address"], "c"],
    },
    "284.json": {
        "get": (["url", "allow_redirects", "kwargs"], ("m", "ClientSession")),
        "status": ([], ("p", "ClientResponse")),
        "ClientConnectorError": [["connection_key", "os_error"], "c"],
    },
    "293.json": {
        "white": [[], "c"],
        "QThread": [["parent"], "c"],
        "QCoreApplication": [["argv"], "c"],
        "Vertical": [[], "c"],
        "QSplitter": [["parent"], "c"],
        "Horizontal": [[], "c"],
        "instance": ([], ("m", "QCoreApplication")),
        "QMainWindow": [["parent", "flags"], "c"],
        "QWidget": [["parent", "flags"], "c"],
        "QApplication": [["argv"], "c"],
        "QAction": [["parent"], "c"],
        "QPushButton": [["parent"], "c"],
        "QLineEdit": [["parent"], "c"],
        "QTextEdit": [["parent"], "c"],
        "QVBoxLayout": [["parent"], "c"],
        "QGridLayout": [["parent"], "c"],
        "QLabel": [["parent", "flags"], "c"],
        "QFileDialog": [["parent", "f"], "c"],
        "QMessageBox": [["parent"], "c"],
        "QComboBox": [["parent"], "c"],
        "QScrollArea": [["parent"], "c"],
        "QStyle": [[], "c"],
        "QGroupBox": [["parent"], "c"],
        "QCheckBox": [["parent"], "c"],
    },
    "303.json": {
        "HTTPError": [[], "c"],
        "parse_url": [["url"], "f"],
        "scheme": ([], ("p", "Url")),
        "connection_from_url": [["url", "kw"], "f"],
        "request_uri": ([], ("p", "Url")),
    },
    "304.json": {
        "load_cert_der_string": [["cert_str"], "f"],
        "get_subject": ([], ("m", "X509")),
        "as_text": (["indent", "flags"], ("m", "X509_Name")),
        "get_issuer": ([], ("m", "X509")),
        "get_pubkey": ([], ("m", "X509")),
    },
}

# main()
